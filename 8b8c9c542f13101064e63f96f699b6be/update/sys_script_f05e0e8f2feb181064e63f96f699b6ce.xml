<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>false</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>ecc_queue</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="ecc_queue">topic=RESTProbe^queue=input^EQ<item endquery="false" field="topic" goto="false" newquery="false" operator="=" or="false" value="RESTProbe"/>
            <item display_value="input" endquery="false" field="queue" goto="false" newquery="false" operator="=" or="false" value="input"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Async Integration Sensor (evnt)</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
    /*
    // Processing the response from the ECC queue record
    var glideUtil = new global.GlobalUtils();

    // Get the response data
    var responseObj = {
        responseBody: glideUtil.getXMLParameter(current.payload, 'output', true),
        status: glideUtil.getXMLParameter(current.payload, 'http_status_code', false),
        payload: String(current.payload)
    };

    // Get callback info from ecc record payload
    var callbackClass = glideUtil.getXMLParameter(current.payload, 'callback_class', false);
    var callbackFunction = glideUtil.getXMLParameter(current.payload, 'callback_function', false);
    var callbackParameters = glideUtil.getXMLParameter(current.payload, 'callback_parameter_obj', false);
    var callbackParamObj = JSON.parse(callbackParameters);
	//gs.info("callbackClass: " + callbackClass + " callbackFunction: " + callbackFunction + " callbackParameters: " + callbackParameters);
    // Execute the callback function via global scope passing in all required params
    glideUtil.executeCallbackFunction(responseObj, callbackClass, callbackFunction, callbackParamObj);
	*/
	gs.eventQueue("x_8899_sharing.callback", current, null, null, "callback");

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-10-04 00:52:58</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f05e0e8f2feb181064e63f96f699b6ce</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>Async Integration Sensor (evnt)</sys_name>
        <sys_overrides/>
        <sys_package display_value="Sharing" source="x_8899_sharing">8b8c9c542f13101064e63f96f699b6be</sys_package>
        <sys_policy/>
        <sys_scope display_value="Sharing">8b8c9c542f13101064e63f96f699b6be</sys_scope>
        <sys_update_name>sys_script_f05e0e8f2feb181064e63f96f699b6ce</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-10-05 11:34:30</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=f05e0e8f2feb181064e63f96f699b6ce"/>
</record_update>
